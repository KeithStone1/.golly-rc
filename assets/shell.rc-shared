# vim:ft=sh et sw=2 ts=2:

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

export EDITOR=vim
export PAGER=less

alias la='ls -la'
alias ll='ls -l'
alias svnstnew='svn st --ignore-externals | fgrep ? | cut -b8-'
alias svnste='svn st --ignore-externals | grep -v ^X'
alias svn_add_rm="svnste | sort | fgrep '?' | cut -b3- | xargs --no-run-if-empty echo svn add; echo; svnste | sort | fgrep '!' | cut -b3- | xargs --no-run-if-empty echo svn rm"
alias b=bundle
alias be='bundle exec'
alias rak='bundle exec rake'
alias s=xdg-open
alias vimrc='vim ~/.vimrc'
alias gemdir='pushd "`gem env | fgrep INSTALL | perl -pe "s/^.+?: //"`/gems"'
alias Vim=vim
alias view='vim -R'
alias sharedrc="vim ~/.golly-rc/assets/shell.rc-shared && echo Reloading... && . ~/.${SHELL}rc"

# Distro-specific
source "$HOME/.golly-rc/lib/distro.sh"
case "$(distro)" in
  ArchLinux)
    alias p='sudo pacman -S --needed'
    alias syu='sudo pacman -Syu'
    alias syua='sudo yaourt -Syua'
    alias ql='pacman -Ql'
    ;;
  Ubuntu)
    function show_installed { f="$1"; [ -z "$f" ] && f='.*'; dpkg --get-selections | grep '[^a-zA-Z]install' | egrep "$f" | sed 's/[ \t].*//' | xargs dpkg -s | egrep '^(Package|Version)' | perl -0000 -pe 's/Package: (\S+)\s*[\r\n]+Version: (\S+)/\1 \2 \2/g' | perl -pe 's/ (?:\d+:)?(\S+?)[-+~]\S+$/ \1/; s/ (\S+) (\S+)$/ \2 \1/' | column -t | perl -pe 's/(\S+)(\s+\S+)$/\1    \2/' | sort ; }
    ;;
esac

# Functions
function show_cp { if [ ! -r "$1" ]; then echo "Can't read: $1"; else unzip -p $1 META-INF/MANIFEST.MF | sed '/^Class-Path:/,$!d' | tr -d '\n\r' | perl -pe 's/^.+?: //; s/ //g; s/(?<=\.jar)/\n/g'; fi; }
function test_cp { show_cp "$1" | sed "s|^|$(dirname "$1")/|" | xargs -L1 ls -l; }
function mc { mkdir -p "$1" && cd "$1"; }
function git_pull_all { [ $? -eq 0 ] && set - .; find "$@" -type d -name .git | xargs -L1 -I{} bash -c 'echo "{}"; cd "{}/.." && git pull; echo'; }

#export GIT_SSL_NO_VERIFY=true
unset RUBYOPT

# RVM
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# RBENV
[ -e "$HOME/.rbenv/bin" ] && export PATH="$HOME/.rbenv/bin:$PATH" && eval "$(rbenv init -)"

# Load local shared settings
[ -f "$HOME/.localrc" ] && source "$HOME/.localrc"
